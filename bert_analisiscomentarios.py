# -*- coding: utf-8 -*-
"""BERT_ANALISISCOMENTARIOS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zBmI3rihEaI_mS3Dt5me2CE9Itsi4kwk
"""

from transformers import BertTokenizer, BertForSequenceClassification, pipeline
import torch
from torch.nn.functional import softmax
import re

# Cargar el tokenizer y el modelo preentrenado de BERT para clasificación de sentimientos
tokenizer = BertTokenizer.from_pretrained('nlptown/bert-base-multilingual-uncased-sentiment')
model = BertForSequenceClassification.from_pretrained('nlptown/bert-base-multilingual-uncased-sentiment')

# Función para limpiar el texto eliminando caracteres no útiles
def limpiar_texto(texto):
    # Eliminar números, símbolos y caracteres no alfabéticos
    texto_limpio = re.sub(r'[^a-zA-Z\s]', '', texto)
    # Convertir el texto a minúsculas
    texto_limpio = texto_limpio.lower()
    return texto_limpio

# Función para preprocesar el texto y tokenizarlo
def preprocesar(texto):
    texto_limpio = limpiar_texto(texto)
    inputs = tokenizer(texto_limpio, return_tensors='pt', truncation=True, padding=True, max_length=512)
    return inputs

# Función para realizar la predicción con BERT
def predecir_sentimiento(comentario):
    # Preprocesar el comentario
    inputs = preprocesar(comentario)
    # Realizar la predicción
    outputs = model(**inputs)
    logits = outputs.logits
    # Aplicar softmax para obtener probabilidades
    probabilidades = softmax(logits, dim=1)
    # Predecir la clase con mayor probabilidad
    prediccion = torch.argmax(probabilidades, dim=1)
    return prediccion.item(), probabilidades

# Función para interpretar la predicción
def interpretar_prediccion(prediccion):
    sentimientos = {
        0: "Muy negativo",
        1: "Negativo",
        2: "Neutral",
        3: "Positivo",
        4: "Muy positivo"
    }
    return sentimientos.get(prediccion, "Indeterminado")

# Comentarios de ejemplo
comentarios = [
    "El producto llegó a tiempo y en excelentes condiciones, lo recomiendo ampliamente.",
    "No tiene buen sabor, esperaba mucho más por el precio que pagué.",
    "Esta AGRIO ese LICOR",
    "AD113131313.ESTUVO MUY BUENO !#1!#!"
]

# Predicción de sentimientos para cada comentario
for comentario in comentarios:
    prediccion, probabilidades = predecir_sentimiento(comentario)
    sentimiento = interpretar_prediccion(prediccion)
    print(f"Comentario: {comentario}")
    print(f"Predicción: {sentimiento}")
    print(f"Probabilidades: {probabilidades}")
    print('-' * 50)

"""# USANDO BERT -> PARA ANALISIS DE COMENTARIOS"""

# Instalar las librerías necesarias
!pip install transformers

# Importar librerías
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from transformers import BertTokenizer, BertForSequenceClassification, Trainer, TrainingArguments
import torch

df = pd.read_excel("Comentarios_Licores_Rebalanceado.xlsx")  # Cambia el nombre a tu archivo
df['label'] = df['Etiqueta'].map({'Positivo': 0, 'Negativo': 1, 'Neutro': 2, 'Invalido': 3})  # Mapear etiquetas a números

# Dividir los datos en entrenamiento y validación
train_texts, val_texts, train_labels, val_labels = train_test_split(
    df['Comentario'].tolist(),
    df['label'].tolist(),
    test_size=0.2,
    random_state=42
)

# Tokenizar los textos usando BERT
tokenizer = BertTokenizer.from_pretrained('dccuchile/bert-base-spanish-wwm-cased')
train_encodings = tokenizer(train_texts, truncation=True, padding=True, max_length=128)
val_encodings = tokenizer(val_texts, truncation=True, padding=True, max_length=128)

tokenizer

# Crear un Dataset personalizado para PyTorch
class CommentDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __len__(self):
        return len(self.labels)

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

train_dataset = CommentDataset(train_encodings, train_labels)
val_dataset = CommentDataset(val_encodings, val_labels)

# Cargar el modelo BERT preentrenado
model = BertForSequenceClassification.from_pretrained("dccuchile/bert-base-spanish-wwm-cased", num_labels=4) # dccuchile/bert-base-spanish-wwm-cased' |bert-base-uncased

import os
os.environ["WANDB_DISABLED"] = "true"

# Configurar los argumentos de entrenamiento
training_args = TrainingArguments(
    output_dir='./results',
    run_name="Mi_Entrenamiento_BERT",  # Nombre del experimento
    num_train_epochs=3,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=64,
    warmup_steps=500,
    weight_decay=0.01,
    logging_dir='./logs',
    logging_steps=10,
    evaluation_strategy="epoch",
    save_strategy="epoch"
)

# Configurar Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset,
)

# Entrenar el modelo
trainer.train()

# Evaluar el modelo
predictions = trainer.predict(val_dataset)
preds = torch.argmax(torch.tensor(predictions.predictions), axis=1)
print(classification_report(val_labels, preds.numpy(), target_names=['Positivo', 'Negativo', 'Neutro', 'Invalido']))

# Guardar el modelo
model.save_pretrained("bert_clasificador")
tokenizer.save_pretrained("bert_clasificador")

# Guardar el modelo y el tokenizer
output_dir = "bert_clasificador_espanol"  # Nombre del directorio donde se guardará el modelo

# Guardar el modelo entrenado
model.save_pretrained(output_dir)

# Guardar el tokenizer
tokenizer.save_pretrained(output_dir)

print(f"Modelo y tokenizer guardados en: {output_dir}")

from transformers import pipeline

# Cargar modelo y tokenizer
model = BertForSequenceClassification.from_pretrained("bert_clasificador")
tokenizer = BertTokenizer.from_pretrained("bert_clasificador")

# Crear pipeline
classifier = pipeline("text-classification", model=model, tokenizer=tokenizer, return_all_scores=True)

# Clasificar un nuevo comentario
comentario = "El licor estuvo agrio "
resultado = classifier(comentario)
print(resultado)

# Cargar modelo y tokenizer entrenados
model = BertForSequenceClassification.from_pretrained("bert_clasificador")
tokenizer = BertTokenizer.from_pretrained("bert_clasificador")

# Crear pipeline
classifier = pipeline("text-classification", model=model, tokenizer=tokenizer, return_all_scores=True)

# Clasificar un nuevo comentario
comentario = "ghsahfgsahjfgsajhf hola estuvo rico"
resultado = classifier(comentario)

# Mostrar resultados procesados
etiquetas = ['Positivo', 'Negativo', 'Neutro', 'Invalido']
for clase, puntaje in zip(etiquetas, resultado[0]):
    print(f"Clase: {clase}, Puntaje: {puntaje['score']:.4f}")

# Identificar la clase con mayor puntaje
clase_predicha = etiquetas[max(range(len(resultado[0])), key=lambda i: resultado[0][i]['score'])]
print(f"\nEl comentario pertenece a la clase: {clase_predicha}")